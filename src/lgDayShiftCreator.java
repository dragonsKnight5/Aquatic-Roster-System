
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import static java.time.temporal.TemporalAdjusters.next;
import javax.swing.JOptionPane;

/*
 * Copyright 2016 james.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @author james
 */
public class lgDayShiftCreator extends javax.swing.JDialog {

    main parent;
    dbConnection connection;
    commonFunctions comFunc;
    /**
     * Creates new form lgDaShiftCreator
     */
    public lgDayShiftCreator(main inParent, dbConnection inConnecton, commonFunctions inCommon) {
        super(inParent, true);
        parent = inParent;
        connection = inConnecton;
        comFunc = inCommon;
        initComponents();
        loadData();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        locationCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        dateCombo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        morningOncallCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        afternoonOncallCombo = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        submitButton1 = new javax.swing.JButton();
        submitAllButton = new javax.swing.JButton();
        startHourSpinner1 = new javax.swing.JSpinner();
        startMinuteSpinner1 = new javax.swing.JSpinner();
        endMinuteSpinner1 = new javax.swing.JSpinner();
        endHourSpinner1 = new javax.swing.JSpinner();
        staffCombo1 = new javax.swing.JComboBox<>();
        submitButton2 = new javax.swing.JButton();
        startHourSpinner2 = new javax.swing.JSpinner();
        startMinuteSpinner2 = new javax.swing.JSpinner();
        endMinuteSpinner2 = new javax.swing.JSpinner();
        endHourSpinner2 = new javax.swing.JSpinner();
        submitButton3 = new javax.swing.JButton();
        startHourSpinner3 = new javax.swing.JSpinner();
        startMinuteSpinner3 = new javax.swing.JSpinner();
        endMinuteSpinner3 = new javax.swing.JSpinner();
        endHourSpinner3 = new javax.swing.JSpinner();
        submitButton4 = new javax.swing.JButton();
        startHourSpinner4 = new javax.swing.JSpinner();
        startMinuteSpinner4 = new javax.swing.JSpinner();
        endMinuteSpinner4 = new javax.swing.JSpinner();
        endHourSpinner4 = new javax.swing.JSpinner();
        submitButton5 = new javax.swing.JButton();
        startMinuteSpinner5 = new javax.swing.JSpinner();
        endMinuteSpinner5 = new javax.swing.JSpinner();
        endHourSpinner5 = new javax.swing.JSpinner();
        submitButton6 = new javax.swing.JButton();
        startMinuteSpinner6 = new javax.swing.JSpinner();
        endMinuteSpinner6 = new javax.swing.JSpinner();
        endHourSpinner6 = new javax.swing.JSpinner();
        CheckBox6 = new javax.swing.JCheckBox();
        CheckBox3 = new javax.swing.JCheckBox();
        CheckBox4 = new javax.swing.JCheckBox();
        CheckBox5 = new javax.swing.JCheckBox();
        CheckBox2 = new javax.swing.JCheckBox();
        staffCombo2 = new javax.swing.JComboBox<>();
        staffCombo3 = new javax.swing.JComboBox<>();
        staffCombo4 = new javax.swing.JComboBox<>();
        staffCombo5 = new javax.swing.JComboBox<>();
        staffCombo6 = new javax.swing.JComboBox<>();
        completionTickbox = new javax.swing.JCheckBox();
        jButton8 = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        startHourSpinner5 = new javax.swing.JSpinner();
        startHourSpinner6 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        weekStartingCombo = new javax.swing.JComboBox<>();
        shiftDayLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel1.setText("Location:");

        locationCombo.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        locationCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                locationComboItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel2.setText("Shift Date:");

        dateCombo.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        dateCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dateComboItemStateChanged(evt);
            }
        });
        dateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel3.setText("On Call Morning");

        morningOncallCombo.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel4.setText("On Call Afternoon");

        afternoonOncallCombo.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel5.setText("Start Time");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel6.setText("End Time");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel7.setText("Staff:");

        submitButton1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitButton1.setText("Submit");
        submitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton1ActionPerformed(evt);
            }
        });

        submitAllButton.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitAllButton.setText("Submit All");
        submitAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitAllButtonActionPerformed(evt);
            }
        });

        startHourSpinner1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startHourSpinner1.setModel(new javax.swing.SpinnerNumberModel(5, 5, 20, 1));
        startHourSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startHourSpinner1StateChanged(evt);
            }
        });
        startHourSpinner1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startHourSpinner1InputMethodTextChanged(evt);
            }
        });

        startMinuteSpinner1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startMinuteSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endMinuteSpinner1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endMinuteSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endHourSpinner1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endHourSpinner1.setModel(new javax.swing.SpinnerNumberModel(10, 10, 21, 1));

        staffCombo1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        submitButton2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitButton2.setText("Submit");
        submitButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton2ActionPerformed(evt);
            }
        });

        startHourSpinner2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startHourSpinner2.setModel(new javax.swing.SpinnerNumberModel(5, 5, 20, 1));
        startHourSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startHourSpinner2StateChanged(evt);
            }
        });
        startHourSpinner2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startHourSpinner2InputMethodTextChanged(evt);
            }
        });

        startMinuteSpinner2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startMinuteSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endMinuteSpinner2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endMinuteSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endHourSpinner2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endHourSpinner2.setModel(new javax.swing.SpinnerNumberModel(10, 10, 21, 1));

        submitButton3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitButton3.setText("Submit");
        submitButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton3ActionPerformed(evt);
            }
        });

        startHourSpinner3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startHourSpinner3.setModel(new javax.swing.SpinnerNumberModel(5, 5, 20, 1));
        startHourSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startHourSpinner3StateChanged(evt);
            }
        });
        startHourSpinner3.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startHourSpinner3InputMethodTextChanged(evt);
            }
        });

        startMinuteSpinner3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startMinuteSpinner3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endMinuteSpinner3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endMinuteSpinner3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endHourSpinner3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endHourSpinner3.setModel(new javax.swing.SpinnerNumberModel(10, 10, 21, 1));

        submitButton4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitButton4.setText("Submit");
        submitButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton4ActionPerformed(evt);
            }
        });

        startHourSpinner4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startHourSpinner4.setModel(new javax.swing.SpinnerNumberModel(5, 5, 20, 1));
        startHourSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startHourSpinner4StateChanged(evt);
            }
        });
        startHourSpinner4.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startHourSpinner4InputMethodTextChanged(evt);
            }
        });

        startMinuteSpinner4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startMinuteSpinner4.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endMinuteSpinner4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endMinuteSpinner4.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endHourSpinner4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endHourSpinner4.setModel(new javax.swing.SpinnerNumberModel(10, 10, 21, 1));

        submitButton5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitButton5.setText("Submit");
        submitButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton5ActionPerformed(evt);
            }
        });

        startMinuteSpinner5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startMinuteSpinner5.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endMinuteSpinner5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endMinuteSpinner5.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endHourSpinner5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endHourSpinner5.setModel(new javax.swing.SpinnerNumberModel(10, 10, 21, 1));

        submitButton6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        submitButton6.setText("Submit");
        submitButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton6ActionPerformed(evt);
            }
        });

        startMinuteSpinner6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startMinuteSpinner6.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endMinuteSpinner6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endMinuteSpinner6.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        endHourSpinner6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        endHourSpinner6.setModel(new javax.swing.SpinnerNumberModel(10, 10, 21, 1));

        CheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox6ActionPerformed(evt);
            }
        });

        staffCombo2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        staffCombo3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        staffCombo4.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        staffCombo5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        staffCombo6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N

        completionTickbox.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        completionTickbox.setText("Close On Completion");

        jButton8.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jButton8.setText("Close");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        refreshButton.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        startHourSpinner5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startHourSpinner5.setModel(new javax.swing.SpinnerNumberModel(5, 5, 20, 1));
        startHourSpinner5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startHourSpinner5StateChanged(evt);
            }
        });
        startHourSpinner5.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startHourSpinner5InputMethodTextChanged(evt);
            }
        });

        startHourSpinner6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        startHourSpinner6.setModel(new javax.swing.SpinnerNumberModel(5, 5, 20, 1));
        startHourSpinner6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startHourSpinner6StateChanged(evt);
            }
        });
        startHourSpinner6.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startHourSpinner6InputMethodTextChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel8.setText("Week Starting:");

        weekStartingCombo.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        weekStartingCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                weekStartingComboItemStateChanged(evt);
            }
        });
        weekStartingCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weekStartingComboActionPerformed(evt);
            }
        });

        shiftDayLabel.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        shiftDayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(completionTickbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(submitAllButton)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(jLabel1))
                                    .addComponent(locationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(morningOncallCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel3)))
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(100, 100, 100)
                                        .addComponent(jLabel2)
                                        .addGap(42, 42, 42))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(afternoonOncallCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(weekStartingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(51, 51, 51)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                            .addComponent(dateCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(shiftDayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(24, 24, 24))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(startHourSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addGap(48, 48, 48)
                                                    .addComponent(startHourSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(startHourSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(startHourSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(startHourSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(startHourSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(CheckBox4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(startMinuteSpinner1)
                                                .addComponent(startMinuteSpinner3)
                                                .addComponent(startMinuteSpinner2))
                                            .addComponent(startMinuteSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(startMinuteSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(startMinuteSpinner4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(jLabel6)
                                        .addGap(83, 83, 83)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(endHourSpinner1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(endHourSpinner2)
                                                        .addGap(6, 6, 6)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(endMinuteSpinner1)
                                                    .addComponent(endMinuteSpinner2)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(endHourSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(endMinuteSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(endHourSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(endMinuteSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(endHourSpinner5)
                                                    .addComponent(endHourSpinner6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(endMinuteSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(endMinuteSpinner5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(1, 1, 1)
                                                    .addComponent(staffCombo3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(staffCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(2, 2, 2)
                                                    .addComponent(staffCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(2, 2, 2)
                                                    .addComponent(staffCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(staffCombo6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(staffCombo5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(2, 2, 2)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(submitButton1)
                                                    .addComponent(submitButton2)
                                                    .addComponent(submitButton3)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(submitButton4, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(submitButton6)
                                                        .addComponent(submitButton5))
                                                    .addGap(2, 2, 2)))))))
                            .addComponent(CheckBox5)
                            .addComponent(CheckBox6)
                            .addComponent(CheckBox3)
                            .addComponent(CheckBox2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weekStartingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(shiftDayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(afternoonOncallCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(locationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(morningOncallCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startHourSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CheckBox2)
                                        .addGap(13, 13, 13)
                                        .addComponent(CheckBox3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startHourSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startHourSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CheckBox4)
                                        .addGap(12, 12, 12)
                                        .addComponent(CheckBox5)
                                        .addGap(11, 11, 11)
                                        .addComponent(CheckBox6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startHourSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startHourSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startHourSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(startMinuteSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(endHourSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(7, 7, 7)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(startMinuteSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(endHourSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(endMinuteSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(7, 7, 7)
                                                .addComponent(endMinuteSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(startMinuteSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endHourSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endMinuteSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(staffCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(staffCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(staffCombo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(staffCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(startMinuteSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endHourSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endMinuteSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(startMinuteSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endHourSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endMinuteSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(startMinuteSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endHourSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endMinuteSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(submitButton4)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(submitButton5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(submitButton6)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(staffCombo5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(staffCombo6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(submitAllButton)
                                .addComponent(completionTickbox))
                            .addComponent(jButton8)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(submitButton1)
                        .addGap(5, 5, 5)
                        .addComponent(submitButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData()
    {
        ResultSet returned;
        try {
            returned = connection.lifeguardLocations();
            while (returned.next()) {
                locationCombo.addItem(returned.getString("location"));
            }
            locationCombo.setSelectedIndex(1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(parent, ex);
        }

        LocalDate date = LocalDate.now();
        System.out.println("Date Now: " + date);
        LocalDate myDate = date.with(next(DayOfWeek.SATURDAY));
        System.out.println("Date next Monday: " + myDate);
        date = myDate;
        int count = 0;
        while (count < 50) {
            dateCombo.addItem(comFunc.formatDate(myDate));
            count++;
            myDate = myDate.plusDays(1);
        }
        count = 0;
        while (count < 7) {
            weekStartingCombo.addItem(comFunc.formatDate(date));
            count++;
            System.out.println("count is: " + count + "\ndate: " + date.toString());
            date = date.plusDays(7);
        }
        refreshButton.doClick();
        
        // set load staff combo values
        System.out.println("Load data staff combo values");
        String shift;
        if ((int) startHourSpinner6.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            String day = comFunc.dateSwitch((String)dateCombo.getSelectedItem()).toLocalDate().getDayOfWeek().toString();
            System.out.println("Load data staff combo values day: " + day);
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + comFunc.dateSwitch((String)weekStartingCombo.getSelectedItem()) + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);
            
            returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo1.addItem(returned.getString("username"));
                staffCombo2.addItem(returned.getString("username"));
                staffCombo3.addItem(returned.getString("username"));
                staffCombo4.addItem(returned.getString("username"));
                staffCombo5.addItem(returned.getString("username"));
                staffCombo6.addItem(returned.getString("username"));                
            }
            if (staffCombo6.getItemCount() < 1) {
                staffCombo1.addItem("None");
                staffCombo2.addItem("None");
                staffCombo3.addItem("None");
                staffCombo4.addItem("None");
                staffCombo5.addItem("None");
                staffCombo6.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }
    
    private void setupOncalls (LocalDate myDate)
    {
        System.out.println("Setup oncall combo values");
        // set oncall combos
        try {
            java.sql.Date tempDate = comFunc.dateSwitch((String) dateCombo.getSelectedItem());
            String day = tempDate.toLocalDate().getDayOfWeek().toString();
            System.out.println("Day from date combo: " + day);
            java.sql.Date weekDate = comFunc.dateSwitch((String)weekStartingCombo.getSelectedItem());
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + weekDate + "\' and " + day
                    + " = \'Morning\'";
            System.out.println("Morning command\n" + command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) 
            {
                morningOncallCombo.addItem(returned.getString("username"));
            }
            command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + weekDate + "\' and " + day
                    + " = \'Afternoon\'";
            System.out.println("Afternoon command\n" + command);

            returned = connection.lookup(command);
            while (returned.next()) 
            {
                afternoonOncallCombo.addItem(returned.getString("username"));
            }
            morningOncallCombo.addItem("None");
            morningOncallCombo.setSelectedItem("None");
            afternoonOncallCombo.addItem("None");
            afternoonOncallCombo.setSelectedItem("None");
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
    }
    
    private void submitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton1ActionPerformed
        LocalTime startTime = LocalTime.of((int)startHourSpinner1.getValue(), (int)startMinuteSpinner1.getValue());
        LocalTime endTime = LocalTime.of((int)endHourSpinner1.getValue(), (int)endMinuteSpinner1.getValue());
        String shift;
        String command;
        if ((int) startHourSpinner1.getValue() >= 12) {
            shift = "Afternoon";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo1.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
        } else {
            shift = "Morning";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo1.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + morningOncallCombo.getSelectedItem() + "\")";
        }

        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {

           int status = connection.addGuardShift(command);
        
            if (status == 1)
            {
                JOptionPane.showMessageDialog(parent, "Shift Added Successfully");
            }
            else
            {
                JOptionPane.showMessageDialog(parent, "Unable To Add Shift");
            }
        }
    }//GEN-LAST:event_submitButton1ActionPerformed

    private void submitAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitAllButtonActionPerformed
        Boolean completeSuccess = true;
        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
                == JOptionPane.YES_OPTION) {
            // add row 1
            LocalTime startTime1 = LocalTime.of((int) startHourSpinner1.getValue(), (int) startMinuteSpinner1.getValue());
            LocalTime endTime1 = LocalTime.of((int) endHourSpinner1.getValue(), (int) endMinuteSpinner1.getValue());
            String shift;
            String command;
            if ((int) startHourSpinner1.getValue() >= 12) {
                shift = "Afternoon";
                command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime1 + "\", \""
                        + endTime1 + "\", \"" + staffCombo1.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
            } else {
                shift = "Morning";
                command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime1 + "\", \""
                        + endTime1 + "\", \"" + staffCombo1.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + morningOncallCombo.getSelectedItem() + "\")";
            }
            int status = connection.addGuardShift(command);

            if (status == 0) {
                completeSuccess = false;
            }
            System.out.println("Adding Row 1 To Database");

            // add row 2
            if (CheckBox2.isSelected()) {
                LocalTime startTime2 = LocalTime.of((int) startHourSpinner2.getValue(), (int) startMinuteSpinner2.getValue());
                LocalTime endTime2 = LocalTime.of((int) endHourSpinner2.getValue(), (int) endMinuteSpinner2.getValue());
                if ((int) startHourSpinner2.getValue() >= 12) {
                    shift = "Afternoon";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime2 + "\", \""
                            + endTime2 + "\", \"" + staffCombo2.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
                } else {
                    shift = "Morning";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime2 + "\", \""
                            + endTime2 + "\", \"" + staffCombo2.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + morningOncallCombo.getSelectedItem() + "\")";
                }
                status = connection.addGuardShift(command);
                if (status == 0) {
                    completeSuccess = false;
                }

                System.out.println("Adding Row 2 To Database");
            }
            // add row 3
            if (CheckBox3.isSelected()) {
                LocalTime startTime3 = LocalTime.of((int) startHourSpinner3.getValue(), (int) startMinuteSpinner3.getValue());
                LocalTime endTime3 = LocalTime.of((int) endHourSpinner3.getValue(), (int) endMinuteSpinner3.getValue());
                if ((int) startHourSpinner3.getValue() >= 12) {
                    shift = "Afternoon";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime3 + "\", \""
                            + endTime3 + "\", \"" + staffCombo3.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
                } else {
                    shift = "Morning";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime3 + "\", \""
                            + endTime3 + "\", \"" + staffCombo3.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + morningOncallCombo.getSelectedItem() + "\")";
                }
                status = connection.addGuardShift(command);
                if (status == 0) {
                    completeSuccess = false;
                }
                System.out.println("Adding Row 3 To Database");
            }

            // add row 4
            if (CheckBox4.isSelected()) {
                LocalTime startTime4 = LocalTime.of((int) startHourSpinner4.getValue(), (int) startMinuteSpinner4.getValue());
                LocalTime endTime4 = LocalTime.of((int) endHourSpinner4.getValue(), (int) endMinuteSpinner4.getValue());
                if ((int) startHourSpinner4.getValue() >= 12) {
                    shift = "Afternoon";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime4 + "\", \""
                            + endTime4 + "\", \"" + staffCombo4.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
                } else {
                    shift = "Morning";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime4 + "\", \""
                            + endTime4 + "\", \"" + staffCombo4.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + morningOncallCombo.getSelectedItem() + "\")";
                }
                status = connection.addGuardShift(command);

                if (status == 0) {
                    completeSuccess = false;
                }
                System.out.println("Adding Row 4 To Database");
            }

            // add row 5
            if (CheckBox5.isSelected()) {
                LocalTime startTime5 = LocalTime.of((int) startHourSpinner5.getValue(), (int) startMinuteSpinner5.getValue());
                LocalTime endTime5 = LocalTime.of((int) endHourSpinner5.getValue(), (int) endMinuteSpinner5.getValue());
                if ((int) startHourSpinner5.getValue() >= 12) {
                    shift = "Afternoon";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime5 + "\", \""
                            + endTime5 + "\", \"" + staffCombo5.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
                } else {
                    shift = "Morning";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime5 + "\", \""
                            + endTime5 + "\", \"" + staffCombo5.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + morningOncallCombo.getSelectedItem() + "\")";
                }
                status = connection.addGuardShift(command);
                if (status == 0) {
                    completeSuccess = false;
                }
                System.out.println("Adding Row 5 To Database");
            }

            //add row 6
            if (CheckBox6.isSelected()) {
                LocalTime startTime6 = LocalTime.of((int) startHourSpinner6.getValue(), (int) startMinuteSpinner6.getValue());
                LocalTime endTime6 = LocalTime.of((int) endHourSpinner6.getValue(), (int) endMinuteSpinner6.getValue());
                if ((int) startHourSpinner6.getValue() >= 12) {
                    shift = "Afternoon";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime6 + "\", \""
                            + endTime6 + "\", \"" + staffCombo6.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
                } else {
                    shift = "Morning";
                    command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String) dateCombo.getSelectedItem()) + "\", \"" + startTime6 + "\", \""
                            + endTime6 + "\", \"" + staffCombo6.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() + "\", \"" + morningOncallCombo.getSelectedItem() + "\")";
                }
                status = connection.addGuardShift(command);
                if (status == 0) {
                    completeSuccess = false;
                }
                System.out.println("Adding Row 6 To Database");
            }
            
            if (completeSuccess)
            {
                JOptionPane.showMessageDialog(parent,"All Shifts Added To Database");
            }
            else
            {
                JOptionPane.showMessageDialog(parent,"Not All Shifts Were Able To Be Add To Database");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(parent, "Shift Add Cancelled");
        }
        
    }//GEN-LAST:event_submitAllButtonActionPerformed

    private void submitButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton2ActionPerformed
        LocalTime startTime = LocalTime.of((int)startHourSpinner2.getValue(), (int)startMinuteSpinner2.getValue());
        LocalTime endTime = LocalTime.of((int)endHourSpinner2.getValue(), (int)endMinuteSpinner2.getValue());
        String shift;
        String command;
        if ((int) startHourSpinner2.getValue() >= 12) {
            shift = "Afternoon";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo2.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
        } else {
            shift = "Morning";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo2.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + morningOncallCombo.getSelectedItem() + "\")";
        }

        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {

           int status = connection.addGuardShift(command);
        
            if (status == 1)
            {
                JOptionPane.showMessageDialog(parent, "Shift Added Successfully");
            }
            else
            {
                JOptionPane.showMessageDialog(parent, "Unable To Add Shift");
            }
        }
    }//GEN-LAST:event_submitButton2ActionPerformed

    private void submitButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton3ActionPerformed
        LocalTime startTime = LocalTime.of((int)startHourSpinner3.getValue(), (int)startMinuteSpinner3.getValue());
        LocalTime endTime = LocalTime.of((int)endHourSpinner3.getValue(), (int)endMinuteSpinner3.getValue());
        String shift;
        String command;
        if ((int) startHourSpinner3.getValue() >= 12) {
            shift = "Afternoon";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo3.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
        } else {
            shift = "Morning";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo3.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + morningOncallCombo.getSelectedItem() + "\")";
        }

        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {

           int status = connection.addGuardShift(command);
        
            if (status == 1)
            {
                JOptionPane.showMessageDialog(parent, "Shift Added Successfully");
            }
            else
            {
                JOptionPane.showMessageDialog(parent, "Unable To Add Shift");
            }
        }
    }//GEN-LAST:event_submitButton3ActionPerformed

    private void submitButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton4ActionPerformed
        LocalTime startTime = LocalTime.of((int)startHourSpinner4.getValue(), (int)startMinuteSpinner4.getValue());
        LocalTime endTime = LocalTime.of((int)endHourSpinner4.getValue(), (int)endMinuteSpinner4.getValue());
        String shift;
        String command;
        if ((int) startHourSpinner4.getValue() >= 12) {
            shift = "Afternoon";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo4.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
        } else {
            shift = "Morning";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo4.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + morningOncallCombo.getSelectedItem() + "\")";
        }

        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {

           int status = connection.addGuardShift(command);
        
            if (status == 1)
            {
                JOptionPane.showMessageDialog(parent, "Shift Added Successfully");
            }
            else
            {
                JOptionPane.showMessageDialog(parent, "Unable To Add Shift");
            }
        }
    }//GEN-LAST:event_submitButton4ActionPerformed

    private void submitButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton5ActionPerformed
        LocalTime startTime = LocalTime.of((int)startHourSpinner5.getValue(), (int)startMinuteSpinner5.getValue());
        LocalTime endTime = LocalTime.of((int)endHourSpinner5.getValue(), (int)endMinuteSpinner5.getValue());
        String shift;
        String command;
        if ((int) startHourSpinner5.getValue() >= 12) {
            shift = "Afternoon";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo5.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
        } else {
            shift = "Morning";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo5.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + morningOncallCombo.getSelectedItem() + "\")";
        }

        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {

           int status = connection.addGuardShift(command);
        
            if (status == 1)
            {
                JOptionPane.showMessageDialog(parent, "Shift Added Successfully");
            }
            else
            {
                JOptionPane.showMessageDialog(parent, "Unable To Add Shift");
            }
        }
    }//GEN-LAST:event_submitButton5ActionPerformed

    private void submitButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton6ActionPerformed
        LocalTime startTime = LocalTime.of((int)startHourSpinner6.getValue(), (int)startMinuteSpinner6.getValue());
        LocalTime endTime = LocalTime.of((int)endHourSpinner6.getValue(), (int)endMinuteSpinner6.getValue());
        String shift;
        String command;
        if ((int) startHourSpinner6.getValue() >= 12) {
            shift = "Afternoon";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo6.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + afternoonOncallCombo.getSelectedItem() + "\")";
        } else {
            shift = "Morning";
            command = "Insert into lifeguard (Shift_date, start_time, end_time, staff1, location, oncall) values (\"" + comFunc.dateSwitch((String)dateCombo.getSelectedItem()) + "\", \"" + startTime + "\", \""
                + endTime + "\", \"" + staffCombo6.getSelectedItem() + "\", \"" + locationCombo.getSelectedItem() +"\", \"" + morningOncallCombo.getSelectedItem() + "\")";
        }

        if (JOptionPane.showConfirmDialog(parent, "Confirm to continue",
                "",
                JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {

           int status = connection.addGuardShift(command);
        
            if (status == 1)
            {
                JOptionPane.showMessageDialog(parent, "Shift Added Successfully");
            }
            else
            {
                JOptionPane.showMessageDialog(parent, "Unable To Add Shift");
            }
        }
    }//GEN-LAST:event_submitButton6ActionPerformed

    private void startHourSpinner1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startHourSpinner1InputMethodTextChanged
        
    }//GEN-LAST:event_startHourSpinner1InputMethodTextChanged

    private void startHourSpinner2InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startHourSpinner2InputMethodTextChanged
        
    }//GEN-LAST:event_startHourSpinner2InputMethodTextChanged

    private void startHourSpinner3InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startHourSpinner3InputMethodTextChanged
        
    }//GEN-LAST:event_startHourSpinner3InputMethodTextChanged

    private void startHourSpinner4InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startHourSpinner4InputMethodTextChanged
        
    }//GEN-LAST:event_startHourSpinner4InputMethodTextChanged

    private void CheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBox6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        System.out.println("Refresh Button Pressed");
        morningOncallCombo.removeAllItems();
        afternoonOncallCombo.removeAllItems();
        LocalDate tempDate = comFunc.dateSwitch(((String)dateCombo.getSelectedItem())).toLocalDate();
        setupOncalls(tempDate);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void startHourSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startHourSpinner1StateChanged
        staffCombo1.removeAllItems();
        String shift;
        if ((int) startHourSpinner1.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            java.sql.Date myDate = comFunc.dateSwitch((String) weekStartingCombo.getSelectedItem());
            String day = myDate.toLocalDate().getDayOfWeek().toString();
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + myDate + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo1.addItem(returned.getString("username"));
            }
            if (staffCombo1.getItemCount() < 1) {
                staffCombo1.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_startHourSpinner1StateChanged

    private void startHourSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startHourSpinner2StateChanged
        staffCombo2.removeAllItems();
        String shift;
        if ((int) startHourSpinner2.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            java.sql.Date myDate = comFunc.dateSwitch((String) weekStartingCombo.getSelectedItem());
            String day = myDate.toLocalDate().getDayOfWeek().toString();
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + myDate + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo2.addItem(returned.getString("username"));                
            }
            if (staffCombo2.getItemCount() < 1) {
                staffCombo2.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_startHourSpinner2StateChanged

    private void startHourSpinner3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startHourSpinner3StateChanged
        staffCombo3.removeAllItems();
        String shift;
        if ((int) startHourSpinner3.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            java.sql.Date myDate = comFunc.dateSwitch((String) weekStartingCombo.getSelectedItem());
            String day = myDate.toLocalDate().getDayOfWeek().toString();
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + myDate + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo3.addItem(returned.getString("username"));
            }
            if (staffCombo3.getItemCount() < 1) {
                staffCombo3.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_startHourSpinner3StateChanged

    private void startHourSpinner4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startHourSpinner4StateChanged
        staffCombo4.removeAllItems();
        String shift;
        if ((int) startHourSpinner4.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            java.sql.Date myDate = comFunc.dateSwitch((String) weekStartingCombo.getSelectedItem());
            String day = myDate.toLocalDate().getDayOfWeek().toString();
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + myDate + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo4.addItem(returned.getString("username"));
            }
            if (staffCombo4.getItemCount() < 1) {
                staffCombo4.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_startHourSpinner4StateChanged

    private void locationComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_locationComboItemStateChanged

    }//GEN-LAST:event_locationComboItemStateChanged

    private void startHourSpinner5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startHourSpinner5StateChanged
        staffCombo5.removeAllItems();
        String shift;
        if ((int) startHourSpinner5.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            java.sql.Date myDate = comFunc.dateSwitch((String) weekStartingCombo.getSelectedItem());
            String day = myDate.toLocalDate().getDayOfWeek().toString();
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + myDate + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo5.addItem(returned.getString("username"));
            }
            if (staffCombo5.getItemCount() < 1) {
                staffCombo5.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_startHourSpinner5StateChanged

    private void startHourSpinner5InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startHourSpinner5InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_startHourSpinner5InputMethodTextChanged

    private void startHourSpinner6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startHourSpinner6StateChanged
        staffCombo6.removeAllItems();
        String shift;
        if ((int) startHourSpinner6.getValue() >= 12) {
            shift = "Afternoon";
        } else {
            shift = "Morning";
        }

        try {
            java.sql.Date myDate = comFunc.dateSwitch((String) weekStartingCombo.getSelectedItem());
            String day = myDate.toLocalDate().getDayOfWeek().toString();
            
            String command = "select username from availability where department = \"Lifeguard\" and location = \'" + locationCombo.getSelectedItem() + "\' and weekStarting = \'" + myDate + "\' and " + day
                    + " = \'" + shift + "\'";
            System.out.println(command);

            ResultSet returned = connection.lookup(command);
            while (returned.next()) {
                staffCombo6.addItem(returned.getString("username"));
            }
            if (staffCombo6.getItemCount() < 1) {
                staffCombo6.addItem("None");
            }
        }
        catch (SQLException ex)
        {
            System.out.println(ex);
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_startHourSpinner6StateChanged

    private void startHourSpinner6InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startHourSpinner6InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_startHourSpinner6InputMethodTextChanged

    private void dateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateComboActionPerformed

    private void weekStartingComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weekStartingComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weekStartingComboActionPerformed

    private void dateComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dateComboItemStateChanged
        shiftDayLabel.setText(comFunc.dateSwitch((String)dateCombo.getSelectedItem()).toLocalDate().getDayOfWeek().toString());
    }//GEN-LAST:event_dateComboItemStateChanged

    private void weekStartingComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_weekStartingComboItemStateChanged
        dateCombo.setSelectedItem(weekStartingCombo.getSelectedItem());
    }//GEN-LAST:event_weekStartingComboItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox2;
    private javax.swing.JCheckBox CheckBox3;
    private javax.swing.JCheckBox CheckBox4;
    private javax.swing.JCheckBox CheckBox5;
    private javax.swing.JCheckBox CheckBox6;
    private javax.swing.JComboBox<String> afternoonOncallCombo;
    private javax.swing.JCheckBox completionTickbox;
    private javax.swing.JComboBox<String> dateCombo;
    private javax.swing.JSpinner endHourSpinner1;
    private javax.swing.JSpinner endHourSpinner2;
    private javax.swing.JSpinner endHourSpinner3;
    private javax.swing.JSpinner endHourSpinner4;
    private javax.swing.JSpinner endHourSpinner5;
    private javax.swing.JSpinner endHourSpinner6;
    private javax.swing.JSpinner endMinuteSpinner1;
    private javax.swing.JSpinner endMinuteSpinner2;
    private javax.swing.JSpinner endMinuteSpinner3;
    private javax.swing.JSpinner endMinuteSpinner4;
    private javax.swing.JSpinner endMinuteSpinner5;
    private javax.swing.JSpinner endMinuteSpinner6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> locationCombo;
    private javax.swing.JComboBox<String> morningOncallCombo;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel shiftDayLabel;
    private javax.swing.JComboBox<String> staffCombo1;
    private javax.swing.JComboBox<String> staffCombo2;
    private javax.swing.JComboBox<String> staffCombo3;
    private javax.swing.JComboBox<String> staffCombo4;
    private javax.swing.JComboBox<String> staffCombo5;
    private javax.swing.JComboBox<String> staffCombo6;
    private javax.swing.JSpinner startHourSpinner1;
    private javax.swing.JSpinner startHourSpinner2;
    private javax.swing.JSpinner startHourSpinner3;
    private javax.swing.JSpinner startHourSpinner4;
    private javax.swing.JSpinner startHourSpinner5;
    private javax.swing.JSpinner startHourSpinner6;
    private javax.swing.JSpinner startMinuteSpinner1;
    private javax.swing.JSpinner startMinuteSpinner2;
    private javax.swing.JSpinner startMinuteSpinner3;
    private javax.swing.JSpinner startMinuteSpinner4;
    private javax.swing.JSpinner startMinuteSpinner5;
    private javax.swing.JSpinner startMinuteSpinner6;
    private javax.swing.JButton submitAllButton;
    private javax.swing.JButton submitButton1;
    private javax.swing.JButton submitButton2;
    private javax.swing.JButton submitButton3;
    private javax.swing.JButton submitButton4;
    private javax.swing.JButton submitButton5;
    private javax.swing.JButton submitButton6;
    private javax.swing.JComboBox<String> weekStartingCombo;
    // End of variables declaration//GEN-END:variables
}
